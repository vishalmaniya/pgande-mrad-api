# PG&E - MRAD Node.js AWS Lambda Function

This AWS Lambda function retrieve station information, processes the data, and stores it in an S3 bucket in CSV format. It fulfills the specified requirements using the Hapi framework nodejs app.

## Prerequisites

Before setting up and deploying the Lambda function, make sure you have the following:

- Docker installed on your local machine.
- An AWS account with permissions to create Lambda functions, S3 buckets, and IAM roles.
- AWS CLI configured with your AWS credentials.

## Docker Setup

1. Clone this repository to your local machine:

   ```bash
   git clone <repository_url>
   cd <repository_directory>
   ```

2. Build the Docker image:

   ```bash
   docker build -t node-lambda-app .
   ```

3. Create a `.env` file in the root directory of the project with the following environment variables:

   ```
   AWS_ACCESS_KEY_ID=<Your_AWS_Access_Key>
   AWS_SECRET_ACCESS_KEY=<Your_AWS_Secret_Key>
   AWS_REGION=<Your_AWS_Region>
   S3_BUCKET_NAME=<Your_S3_Bucket_Name>
   ```

## Usage

### Local Development with Docker

To run the Lambda function locally in a Docker container, follow these steps:

1. Start a Docker container:

   ```bash
   docker run -p 3000:3000 --env-file .env node-lambda-app
   ```

2. Open a web browser or use a tool like Postman to make a GET request to:

   ```
   http://localhost:3000/api/process-station-data
   ```

### AWS Deployment

To deploy the Lambda function on AWS, follow these steps:

1. Deploy the Lambda function to AWS by running the following command:

   ```bash
   npm run deploy
   ```

2. The Lambda function will be created on AWS. Make note of its ARN.

3. You need to set up an AWS trigger for the Lambda function to run it manually. You can use an AWS S3 event trigger, AWS API Gateway, or any other suitable method.

## Testing

To run unit tests for the API call, execute the following command:

```bash
npm test
```

## Folder Structure

- `src`: Contains the Lambda function code.
- `test`: Contains unit tests for the Lambda function.
- `scripts`: Contains deployment and testing scripts.

## License

This project is licensed under the MIT License - see the [LICENSE](LICENSE) file for details.

---

With Docker, you can containerize your Node.js AWS Lambda function for local development and deployment. Make sure to replace `<repository_url>`, `<repository_directory>`, and other placeholders with the appropriate values for your project.
